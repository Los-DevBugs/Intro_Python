# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb

##3.10 Intereses de una cuenta bancaria.
"""

x = int(input("inserte numero 1: "))
x2 = int(input("inserte numero 2: "))
x3 = int(input("inserte numero 3: "))

numeros = [x,x2,x3]
numeros.sort(numeros)

print(f"Los numeros ordenados ascendentemente son:"+numeros)

"""## 3.13 Calificaciones numéricas y literales.

"""

def calificacion_literal(nota):
    if nota >= 20.0:
        return "Sobresaliente"
    elif nota >= 18.0:
        return "Notable"
    elif nota >= 15.0:
        return "Bien"
    elif nota >= 11.0:
        return "Aprobado"
    else:
        return "JALADO!!"

# Solicitar calificación al usuario
nota = float(input("Introduce la calificación numérica (0-10): "))

# Mostrar el resultado literal
literal = calificacion_literal(nota)
print(f"Tu calificación es: {literal}")

"""##3.15 Convertir de grados sexagesimales a radianes y viceversa."""

# Definir el valor de pi manualmente
PI = 3.1416

# Función para convertir grados a radianes
def grados_a_radianes(grados):
    return grados * (PI / 180)

# Función para convertir radianes a grados
def radianes_a_grados(radianes):
    return radianes * (180 / PI)

# Menú para que el usuario elija la conversión
print("Conversor de Grados y Radianes")
print("1. Convertir de Grados a Radianes")
print("2. Convertir de Radianes a Grados")
opcion = input("Elige una opción (1 o 2): ")

# Convertir según la opción elegida
if opcion == "1":
    grados = float(input("Introduce el valor en grados: "))
    radianes = grados_a_radianes(grados)
    print(f"{grados} grados son {radianes} radianes.")
elif opcion == "2":
    radianes = float(input("Introduce el valor en radianes: "))
    grados = radianes_a_grados(radianes)
    print(f"{radianes} radianes son {grados} grados.")
else:
    print("Opción no válida.")

"""##4.14 Cálculo de la raíz cuadrada."""

# Función para calcular la raíz cuadrada usando el método de Newton
def raiz_cuadrada(num, precision=0.00001):
    if num < 0:
        return "No se puede calcular la raíz cuadrada de un número negativo"

    aproximacion = num / 2.0  # Suposición inicial
    while abs(aproximacion ** 2 - num) > precision:
        aproximacion = (aproximacion + num / aproximacion) / 2.0
    return aproximacion

# Solicitar número al usuario
numero = float(input("Introduce un número para calcular su raíz cuadrada: "))

# Mostrar el resultado
resultado = raiz_cuadrada(numero)
print(f"La raíz cuadrada de {numero} es aproximadamente {resultado:.5f}")

"""##4.15 Dibujo de un cuadrado."""

# Función para dibujar un cuadrado
def dibujar_cuadrado(lado):
    # Dibuja la primera línea (superior)
    print(" 0" * lado)

    # Dibuja los lados del cuadrado
    for i in range(lado - 2):
        print(" 0" * (lado))

    # Dibuja la última línea (inferior)
    print(" 0" * lado)

# Solicitar el tamaño del lado del cuadrado al usuario
lado = int(input("Introduce el tamaño del lado del cuadrado: "))

# Verificar que el tamaño sea válido (mayor que 1)
if lado > 1:
    dibujar_cuadrado(lado)
else:
    print("El tamaño del lado debe ser mayor que 1.")